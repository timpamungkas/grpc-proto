// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/payment/payment.proto

package payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YourServiceClient is the client API for YourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YourServiceClient interface {
	YourMethod(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (YourService_YourMethodClient, error)
}

type yourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYourServiceClient(cc grpc.ClientConnInterface) YourServiceClient {
	return &yourServiceClient{cc}
}

func (c *yourServiceClient) YourMethod(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (YourService_YourMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &YourService_ServiceDesc.Streams[0], "/payment.YourService/YourMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &yourServiceYourMethodClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YourService_YourMethodClient interface {
	Recv() (*PaymentResponse, error)
	grpc.ClientStream
}

type yourServiceYourMethodClient struct {
	grpc.ClientStream
}

func (x *yourServiceYourMethodClient) Recv() (*PaymentResponse, error) {
	m := new(PaymentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YourServiceServer is the server API for YourService service.
// All implementations must embed UnimplementedYourServiceServer
// for forward compatibility
type YourServiceServer interface {
	YourMethod(*PaymentRequest, YourService_YourMethodServer) error
	mustEmbedUnimplementedYourServiceServer()
}

// UnimplementedYourServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYourServiceServer struct {
}

func (UnimplementedYourServiceServer) YourMethod(*PaymentRequest, YourService_YourMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method YourMethod not implemented")
}
func (UnimplementedYourServiceServer) mustEmbedUnimplementedYourServiceServer() {}

// UnsafeYourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YourServiceServer will
// result in compilation errors.
type UnsafeYourServiceServer interface {
	mustEmbedUnimplementedYourServiceServer()
}

func RegisterYourServiceServer(s grpc.ServiceRegistrar, srv YourServiceServer) {
	s.RegisterService(&YourService_ServiceDesc, srv)
}

func _YourService_YourMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YourServiceServer).YourMethod(m, &yourServiceYourMethodServer{stream})
}

type YourService_YourMethodServer interface {
	Send(*PaymentResponse) error
	grpc.ServerStream
}

type yourServiceYourMethodServer struct {
	grpc.ServerStream
}

func (x *yourServiceYourMethodServer) Send(m *PaymentResponse) error {
	return x.ServerStream.SendMsg(m)
}

// YourService_ServiceDesc is the grpc.ServiceDesc for YourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.YourService",
	HandlerType: (*YourServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "YourMethod",
			Handler:       _YourService_YourMethod_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/payment/payment.proto",
}
